namespace stp.obj;

------- Objects/Traits
interface .Object {
    const .TypeName: string,
    const .IsFullyRegistered: bool -- Modified by .BeginMeta / .Register
    const .IsTrait: bool

    if .IsTrait {
        operator .__call = stp.obj.ApplyTrait
    }

    if not .IsTrait {
        const .FinalMeta: metatable(.Object) = self
    }
}

-- Creates a stub metatable
fn .BeginObject(typename: string) -> metatable(.Object)
fn .BeginTrait(typename: string) -> metatable(.Object)

-- Makes existing metatable registrable. You need to set `.TypeName`.
fn .BeginExistingObject(meta: metatable(.Object)) -> metatable(.Object)

internal hook ._OnMetaCreated(meta: metatable(.Object))

-- Registers an object
fn .Register(meta: metatable(.Object))
hook .OnMetaRegistered(meta: metatable(.Object))

fn .GetObjectMetatables() -> table(typename: string, metatable(.Object))
fn .GetTraitMetatables() -> table(typename: string, metatable(.Object))

------- Trait application stuff
internal fn ._MergablesInit() -> table

-- `traitmeta` should be a registered trait.
-- `targetmeta` should be a not-fully-registered object or trait.
fn .ApplyTrait(traitmeta: metatable(.Object), targetmeta: metatable(.Object))

-- `meta` shoud be a non-fully-registered object/trait
-- `keyname` is a name of key that all mergables of `keyname` will be merged into.
-- `impl_name` is similar to second argument of `hook.Add`.
-- Mergables respect addition order.
fn .MergablesAdd(meta: metatable(.Object), keyname: string, impl_name: string, merger_name: string, value: any|nil)

fn .MergablesDeclare(meta: metatable(.Object), keyname: string, merger_name: string)

type .MergablesDesc = {
    .MaxIdx: uint,
    .MergerName: string,
    .List: table(impl_name: string, {
        Idx: uint,
        Value: any|nil
    }) 
}

-- A low-level function.
fn .MergerRegister(name: string, fn: fn(meta: metatable(.Object), key: string, values: .MergablesDesc))

-- `array[i].Key` is an `impl_name`. Index is `Idx`, see `.MergablesDesc`
fn .MergerRegisterArray(name: string, fn: fn(
    meta: metatable(.Object), key: string, array: array({Key: string, Value: any|nil})))


------- Utilities
interface .NestedObject {
    require .Object

    const .PostfixName: string
    const .OwnerType: metatable(.Object)
}

fn .ApplyMany(target: metatable(.Object), callables: ...false | fn(meta: metatable(.Object))) -> metatable(.Object)

fn .ConstructNestedType(target: metatable(.Object), name_postfix: string, 
    callables: ...false | fn(metatable(.NestedObject))) -> metatable(.NestedObject)

merger CallInOrder_Member
-- values should be fn(self, ...args)
-- merged into fn(self, ...args) that calls values in addition order

-- Throws an error if fully registered
fn .CheckNotFullyRegistered(meta: metatable(.Object))
fn .CheckFullyRegistered(meta: metatable(.Object))

fn .HookDefine(meta: metatable(.Object), keyname: string)
fn .HookAdd(meta: metatable(.Object), keyname: string, valname: string, fn: fn(self, ...args))

-- Final object registraiton will fail if field 'keyname' is not set anywhere.
-- See stp.CheckType for type format.
fn .MarkAbstract(meta: metatable(.Object), keyname: string, valtype: string | array(string))

fn .MakeAttached(accessor: string) -> mixin {
    require .NestedObject

    var .Owner: .NestedObject.OwnerType
    -- Object is created on creation of owner object and removed after it's removal


    -- Modify `attach_params` here
    hook .FillInitParams(owner_params: table, attach_params: table)

    fn .NestedObject.OwnerType:{accessor}() -> self
}

------- Instantiatable Objects
trait .Initializable {
    hook :Init(args: table)
    hook :PostInit(args: table)
}

trait .Removable {
    require .Initializable

    hook :OnPreRemove(cascaded: bool)
    hook :OnRemove(cascaded: bool)
}

trait .Instantiatable {
    require .Removable
    require .Initializable

    -- Run on metatable, *not* on instance
    fn :Create(args: table) -> .Instantiatable

    fn :Remove(cascaded: bool)

    -- Object considered to be valid after :Init and before :Remove
    fn :IsValid() -> bool
}

hook .PreInit(obj: .Instantiatable, args: table)
hook .PostInit(obj: .Instantiatable, args: table)

hook .PreRemove(obj: .Instantiatable, cascaded: bool)
hook .PostRemove(obj: .Instantiatable, cascaded: bool)
------- Generic Managers
struct .ManagerDesc = {
    GenerateKey: fn(mgr: .Initializable + .Manager(self), item: .Removable + ManagedItem(self), userdata: ...any) -> any,

    -- Following fields are used for generated functions' names
    ItemSg: string, -- Item name in singular
    ItemPl: string, -- Item name in plural
    ManagerSg: string, -- Manager name in singular
}

struct .ManagerData = {
    Item: metatable(.Removable + .ManagedItem(Desc)),
    Manager: metatable(.Initializable + .Manager(Desc)),
    Desc: .ManagerDesc
}

nonpubctor mixin(md: .ManagerDesc) .Manager {
    require .Initializable

    type Item: .ManagedItem(md);
    type Key;

    fn :Register{md.ItemSg}(item: Item, userdata: ...any) -> Key
    hook :OnPreRegistered{md.ItemSg}(item: Item, key: Key, userdata: ...any)
    hook :OnPostRegistered{md.ItemSg}(item: Item, key: Key, userdata: ...any)

    fn :Unregister{md.ItemSg}(item: Item)
    fn :Unregister{md.ItemSg}ByKey(key: Key)
    fn :UnregisterAll{md.ItemPl}()
    hook :OnPreUnregistered{md.ItemSg}(item: Item, key: Key)
    hook :OnPostUnregistered{md.ItemSg}(item: Item, key: Key)

    fn :GetAll{md.ItemPl}() -> table(Key, Item)

    -- If not an item, returns nil
    fn :Get{md.ItemSg}Key(item: Item|table) -> Key|nil
    -- If not a valid key, returns nil
    fn :Get{md.ItemSg}ByKey(key: Key|any) -> Item|nil
}

nonpubctor mixin(md: .ManagerDesc) .ManagedItem {
    require .Removable

    type Key;
    type Manager: .Manager(md);

    -- Following functions return nil if this item is not currently registered
    fn :GetUsed{md.ManagerSg}() -> Manager|nil
    fn :Get{md.ItemSg}Key() -> Key|nil

    
    hook :OnPreRegistered{md.ItemSg}(mgr: Manager, key: Key, userdata: ...any)
    hook :OnPostRegistered{md.ItemSg}(mgr: Manager, key: Key, userdata: ...any)
    hook :OnPreUnregistered{md.ItemSg}(mgr: Manager, key: Key)
    hook :OnPostUnregistered{md.ItemSg}(mgr: Manager, key: Key)
}

-- Adds .Manager(desc) to manager, .ManagedItem(desc) to item
fn .MakeManager(
    item: metatable(.Removable), manager: metatable(.Object),
    desc: .ManagerDesc) -> .ManagerData

------- Trackable objects
trait .Trackable {
    require .Instantiatable

    const .IsTrackable: bool = true
    -- Id is nil while object is not tracked
    -- Set by .Tracker._Register
    readonly .TrackId: .Tracker.Id | nil

    hook :OnPreTracked(newid: .Tracker.Id)
    hook :OnPostTracked()
}

trait .TrackableLocal {
    require .Trackable

    -- Tracks object on creation. For non-networkable objects
}

trait .TrackableNetworked {
    require .Trackable

    const .IsTrackableNet: bool = true

    CL ctorparam .TrackId: .Tracker.Id

    -- Tracks object on creation. Clientside, `.TrackId` is required
}

namespace .Tracker = {
    -- Positive IDs are for networkable (shared) objects,
    -- Negative - for local (client-only or server-only) objects
    type .Id = nint24
    const .ID_BITS_NET = 23
    const .ID_MAX: uint
    const .ID_MIN: int


    internal fn ._Track(obj: .Trackable, id: .Id)
    hook .OnPreTracked(obj: .Trackable, newid: .Tracker.Id)
    hook .OnPostTracked(obj: .Trackable)

    fn .Get(id: .Id|0) -> .Trackable|nil

    fn .GetAllNetworkable() -> table(.Id > 0, .Trackable)
    fn .GetAllLocal() -> table(-.Id > 0, .Trackable)

    fn .IsNetworkable(arg: .Id|.Trackable) -> bool
}

------- Subobjects
-- Subobject of one key can only be stored in one subobject container and only in one subobject slot.
-- Subobject loops are not allowed.

nonpubctor mixin(key: string) .SubobjectContainer {
    const .Is{key}SubobjContainer = true

    -- Following functions should be used only before .obj.Register.
    -- They should be called on metatable, not on instance.
    fn :RegisterSubobj{key}(name: string)

    -- Following values should be accessed only after .obj.Register
    const .Subobj{key}Desc: struct {
        final const .Count: uint,
        -- Amount of bits needed to represent (index-1) of any of {key} subobjects
        final const .Bits: uint, 

        const .IdToName: table(uint, string)
        const .NameToId: table(string, uint)
    }

    readonly .Subobj{key}: struct {
        type .Item = .SubobjectStorable(key)

        -- Do not replace values of following tables
        readonly .ById: table(uint, .Item|nil)
        readonly .ByName: table(string, .Item|nil)

        fn :SetById(id: uint, val: .Item|nil)
        fn :SetByName(name: string, val: .Item|nil)

        fn :ClearAll()
    }
}

nonpubctor mixin(key: string) .SubobjectStorable {
    const .IsSubobj{key}Storable = true

    readonly .Subobj{key}Owner: nil | struct {
        readonly .Owner: .SubobjectContainer(key),
        readonly .SlotName: string,
        readonly .SlotId: uint
    }

    
}

-- Adds .SubobjectContainer(key) to meta
fn .MakeSubobjectContainer(meta: metatable(.Instantiatable), key: string)
-- Adds .SubobjectStorable(key) to meta
fn .MakeSubobjectStorable(meta: metatable(.Instantiatable), key: string)

------- Variables

trait .VariableContainer {
    require .Instantiatable
    require .SubobjectContainer("Variable")
}

trait .Variable {
    require .Instantiatable
    require .SubobjectStorable("Variable")

    doconly param type .TData

    -- Extracts needed 
    abstract fn :VariableInit(ctor_args: table) -> .TData
    abstract fn :VariableGet() -> .TData
    abstract fn :VariableSet(val: .TData)

    hook :VariableOnSet(oldval: .TData, newval: .TData)
}

trait .VariableField {
    require .Variable

    impl fn :VariableGet() -> .TData
    impl fn :VariableSet(val: .TData)
}

-- If parentmeta == nil, `varmeta` must be a `.NestedObject`, than parentmeta = varmeta.OwnerType
-- Adds `var .Owner: typeof(parentmeta)`
fn .MakeVariableAttached(varmeta: metatable(.Variable), parentmeta: metatable(.VariableContainer) | nil)

-- Adds .VariableField, calls .MakeVariableAttached
fn .MakeVariableField(meta: metatable(.NestedObject))


fn .MakeVariableAccessors(getter: string|nil|false, setter: string|nil|false, listener: string|nil|false)
    -> mixin {
        require .Variable
        require .NestedObject

        if getter ~= nil and getter ~= false {
            fn .NestedObject.OwnerType:{getter}() -> .Variable.TData
        }

        if setter ~= nil and setter ~= false {
            fn .NestedObject.OwnerType:{setter}(value: .Variable.TData)
        }

        if listener ~= nil and listener ~= false {
            abstract fn .NestedObject.OwnerType:{listener}(oldval: .Variable.TData, newval: .Variable.TData)
        }
    }


-- If you want to add custom initialization logic, implement .Variable:VariableInit yourself

fn .VariableRequireInit(ctorkey: string) -> mixin {
    require .Variable

    -- Errors if `ctor_args[ctorkey] == nil`
    impl fn :VariableInit(ctor_args: table) -> .Variable.TData
}

fn .VariableDefault(default: mixin.Variable.TData) -> mixin: mixin {
    require .Variable

    -- Not cares about ctor_args, always returns `default`
    impl fn :VariableInit(ctor_args: table) -> .Variable.TData
}