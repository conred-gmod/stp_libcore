namespace stp.obj.net

------- Networkable trait

-- Can be sent to client from server
trait .Networkable {
    require .obj.SubobjectStorable("Network")

    -- Restrictors can not have loops
    SV fn :NetGetRestrictor() -> .Networkable|nil
    SV fn :NetSetRestrictor(restr: .Networkable|nil)

    SV abstract fn .NetGetRecipients(recip: CRecipientList)
}

fn .MakeRecipientEveryone(meta: metatable(.Networkable)) -> mixin {
    SV impl fn .NetGetRecipients(recip: CRecipientList) {
        recip:AddAllPlayers() -- Just like that
    }
}

-- Can be sent to server from client
trait .NetworkableRev {
    require .obj.SubobjectStorable("NetworkRev")
}

trait .NetworkableComposite {
    require .Networkable
    require .obj.SubobjectContainer("Network")
    require .obj.SubobjectContainer("NetworkRev")
}

------- Restrictors

SV namespace .restrictors {
    readonly .Unrestricted: table(.Networkable, true)

    readonly .RestrictedByThis: table(
        restrictor: .Networkable, table(restricted: .Networkable, true))

    internal fn ._Set(obj: .Networkable, restrictor: .Networkable|nil)
}

------- Awareness

SV namespace .awareness {
    internal fn ._Update()

    internal fn ._MarkAware(obj: .Networkable, plys: array(Player))

    internal fn ._GetRecipients(obj: .Networkable) -> CRecipientList | nil

    internal fn ._GetNewlyAware() -> array({
        Object: .Networkable,
        NewlyAware: array(Player)
    })
}

------- Low-level Sendable traits

-- Has data to send to client
trait .Sendable {
    require .Networkable

    SV abstract fn :NetTransmit()
    SV abatract fn :NetIsUnreliable() -> bool
    CL abstract fn :NetReceive()
}

-- Has data to send to server
trait .SendableRev {
    require .NetworkableRev

    CL abstract fn :NetTransmit()
    CL abatract fn :NetIsUnreliable() -> bool
    SV abstract fn :NetReceive(sender: Player)
}

-- Client will be notified of creation of such object
trait .SendableInit {
    require .Networkable

    SV abstract fn :NetTransmitInit()
    -- When called, `self` is a metatable, not object instance!
    CL abstract fn :NetReceiveInit() -> ctor_params: table
}

trait .Instantiatable {
    require .NetworkableComposite
    require .TrackableNetworked
    require .SendableInit

    const .IsNetInstantiatable = true

    CL hook :Init(args: table) -- Clientside, object can only be constructed when init data received from server
    CL hook :OnPreRemove(cascaded: bool) -- Clientside, non-cascaded remove can only be initiated by server 
}

internal fn ._MarkDirty(obj: .Sendable | .SendableRev)

internal fn ._TransmitAll()

fn .MakeUnreliable(meta: metatable(.Sendable | .SendableRev))
fn .MakeReliable(meta: metatable(.Sendable | .SendableRev))

--- ??? something meduim-level

------- High-level traits

-- Just a networkable variable (like ENTITY:NetworkVar)
-- Stores it's value, transmits only when changed.
-- When new player is connected, value is retransmitted
trait .Var {
    doconly param type .TData;

    require .obj.Variable({ TData = .TData })
    require .Sendable
    require .SendableInit

    abstract const .SCHEMA: .Schema({ TData = .TData })
}

fn .MakeVar(schema: .Schema({ TData = mixin.Var.TData})) -> mixin: mixin {
    require .Var

    impl const .SCHEMA = schema
}

-- A server-to-client net message (like `net.Begin`/`net.Send(players)`).
-- Can not be sent more than once a tick.
-- Not retransmitted to newly-connected players
trait .MsgUnbuffered {
    doconly param type .TData;
    require .Sendable

    abstract const .SCHEMA: .Schema({ TData = .TData })


    SV function :Send(data: .TData)
    CL hook :OnReceived(data: .TData)
}

fn .MakeMsgFwd(schema: .Schema({ TData = mixin.MsgUnbuffered.TData}), buffered: false) -> mixin: mixin {
    require .MsgUnbuffered

    impl const .SCHEMA = schema
}

-- A client-to-server net message (like `net.Begin`/`net.SendToServer()`).
-- Can not be sent more than once a tick.
trait .MsgRevUnbuffered {
    doconly param type .TData;
    require .SendableRev

    abstract const .SCHEMA: .Schema({ TData = .TData })

    CL function :Send(data: .TData)
    SV hook :OnReceived(data: .TData, sender: Player)
}

fn .MakeMsgRev(schema: .Schema({ TData = mixin.MsgRevUnbuffered.TData}), buffered: false) -> mixin: mixin {
    require .MsgRevUnbuffered

    impl const .SCHEMA = schema
}

fn .MakeMsgAccessors(send: string, receiver: string) -> mixin {
    require .MsgUnbuffered | .MsgRevUnbuffered as MsgTrait
    require .MakeMsgFwd.mixin | .MakeMsgRev.mixin

    if SIDE == side(MsgTrait.Send) {
        fn .MsgTrait.OwnerType:{send}(data: .MsgTrait.TData)
    } else {
        -- sender is not-nil if MsgTrait == .MsgRevUnbuffered, else it is always nil
        abstract fn .MsgTrait.OwnerType:{receiver}(data: .MsgTrait.TData, sender: Player|nil)
    }
}

trait .EasyComposite {
    require .Instantiatable
    require stp.obj.VariableContainer
    SV require .MakeReliable
}

------- Standard Schemas

internal fn ._GetNetworkableFromParentAndId(parent: .NetworkableComposite|nil, id: uint, revnet: bool)
    -> (revnet ? .NetworkableRev : .Networkable) | nil

namespace schema {
    struct .Schema {
        doconly param type .TData

        transmit: fn(data: .TData)
        receive: fn() -> .TData
    }

    -- All sizes are in bits

    -- Size: (1 + string_length) * 8
    var .String: .Schema({TData = string})

    -- Size: 32
    var .Float32: .Schema({TData = number})
    -- Size: 64
    var .Float64: .Schema({TData = number})

    -- Size: 0 (transmits nothing, returns `defualt` on receive)
    fn .Nothing_ReturnDefault(default: any|nil) -> .Schema({TData = typeof(default)})

    -- Size: `bits` (transmits nothing and receives 0 when `bits` == 0)
    fn .Int(bits: 0..32) -> .Schema({TData = int(bits) })
    fn .UInt(bits: 0..32) -> .Schema({TData = uint(bits) })

    -- Size: 1
    var .Bool: .Schema({TData = bool})

    -- Size: currently 16
    var .Entity: .Schema({TData = Entity})
    -- Size: depends on maximum amount of players on this server, 0..8 AFAIK
    var .EntityPlayer: .Schema({TData = Player})

    -- Size: depends
    var .StpNetworkable: .Schema({TData = .Networkable})
    var .StpNetworkableRev: .Schema({TData = .NetworkableRev})

    -- Size: depends
    fn .ReadNetworkableAny_FinalId(revnet: bool) -> owner: .NetworkableComposite|nil, id: pint


    -- Size: ??
    -- Not works for vectors with components outside of -16384..16384
    var .VectorWorldPos: .Schema({TData = Vector})

    -- Size: ??
    -- Vector must have length of 1
    ver .VectorUnit: .Schema({TData = Vector})

    -- Size: ??
    var .Angle: .Schema({TData = Angle})

    -- Size: ??
    var .Matrix4x4: .Schema({TData = Matrix})

    -- Size: 24
    -- Not transmits alpha, receives alpha of 255
    var .ColorRGB: .Schema({TData = Color})

    -- Size: 32
    var .ColorRGBA: .Schema({TData = Color})
}