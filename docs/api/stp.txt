namespace stp

-- To be for tables that need to be persisted across hot reloads.
-- Should only be called in root file scope (not in functions nor in hook handlers)
fn .GetPersistedTable(name: string, default: table) -> table

--[[
    File name:
    _cl = runs AddCSLuaFile, includes on client only
    _sh = runs AddCSLuaFile, includes both on client and server
    _sv = includes on server only
]]

-- Returns nil if not a lua file
fn .GetRealmFromFilename(filename: string) -> "sv"|"cl"|"sh"|nil


fn .IncludeFile(path: string) -> any|nil
-- includes (prefix..files[1], prefix..files[2], ...)
fn .IncludeList(prefix: string, files: array(string))

-- Includes lua subfiles of `dir` and (subdirectory..module_name) where they exist
fn .IncludeModules(dir: string, module_name: string)


fn .Error(msgparts: ...(any)) -- Unlike GMod Error(), this actually errors and halts execution

-- Uses typenames registered by .RegisterType
fn .CheckType(val: any|nil, valname: string, allowed_types: array(string)|string) -> val: any|nil

fn .RegisterType(name: string, {
    IsInstance: fn(value: any|nil) -> bool
})

fn .IsType(val: any|nil, type: string) -> bool
fn .IsAnyType(val: any|nil, types: array(string)) -> bool

fn .ToString(val: any|nil, pretty_print: bool|nil = false) -> string

-- Use like this:

-- RecursiveRemoveFalseValues({
--    obj = { net = {
--        schema = {},
--        restrictors = SERVER and {},
--        awareness = SERVER and {}
--    } },
--    testing = {},
--
--    db = {}
--})

-- On CLIENT it will remove obj.net.restrictors and obj.net.awareness.
fn .RecursiveRemoveFalseValues(tbl: table(any, false|table)) -> table(any, table)

-- Different algorithms

namespace table {
    fn .ReverseInplace(array: array(any))

    -- Like #table, but has no undefined behaviour if it has non-sequential keys.
    fn .SeqCount(table: table(any, any)) -> uint

    -- Iterates whole array and returns key of item == value
    fn .SeqFindValue(array: array(any), value: any) -> key: uint|nil

    -- Removes `value` from `tbl`, moves item from end of the array to its place, returns index of this place.
    fn .RemoveFastByValue(tbl: array(any), value: any) -> replacement_index: uint|nil
}


var .DebugFlags: {
    -- stplib_debug_typesys 1 | developer >1
    var .TypeSystem: bool
    -- stplib_debug_dumptypes 1
    var .DumpTypes: bool
}